# ~/rustdesk-server-backend/Caddyfile
{
  # Global options for Caddy
  # This block loads the layer4 app, required for TCP/UDP proxying.
  # This must be present.
  servers {
    protocol tcp
    # Define a server that listens on standard HTTPS port (443)
    # It's a TCP server, not an HTTP server.
    https 443 {
      listen 443 {
        protocol tcp # Listen for raw TCP connections on 443
        tls {
          # Caddy will automatically get SSL certs for desk.captainkirk.dev
          # This requires desk.captainkirk.dev to be added as a custom domain
          # to your 'rustdesk-caddy' Render Web Service.
          domains desk.captainkirk.dev
        }
      }

      # Route based on SNI (Server Name Indication) for TLS traffic.
      # This tells Caddy to apply these rules if the incoming TLS connection is for desk.captainkirk.dev.
      route {
        tls {
            sni desk.captainkirk.dev
        }

        # Proxy HBBS (Signaling Server) traffic on port 443
        # Render's internal service name for hbbs is 'rustdesk-hbbs' (from render.yaml)
        # Its internal port is 21115 (from hbbs.Dockerfile / your render.yaml)
        @to_hbbs {
            # This matches if the traffic needs to go to hbbs (e.g., if it's the signaling port)
            # You might need specific matchers if different client behaviors
        }
        handle @to_hbbs {
            reverse_proxy rustdesk-hbbs:21115
        }

        # Proxy HBBR (Relay Server) traffic on port 443 (as a fallback or for specific clients)
        # Render's internal service name for hbbr is 'rustdesk-hbbr' (from render.yaml)
        # Its internal port is 21116 (from hbbr.Dockerfile / your render.yaml)
        @to_hbbr {
            # This is a general fallback, or could be based on specific SNI (e.g. relay.desk.captainkirk.dev)
            # If all traffic goes to 443, you might need more advanced rules or client config.
        }
        handle @to_hbbr {
            reverse_proxy rustdesk-hbbr:21116
        }

        # Catch-all for any other traffic on this domain/port
        # You might decide to drop it, or send it somewhere specific.
        # This is optional but can prevent unexpected routing.
        # handle {
        #   respond "Not found" 404
        # }

      }
    }
  }
}
